import numpy as np
import pandas as pd


# array = np.array([[1,2,3],[2,3,4]])
# print(array)
# print('number od dim:',array.ndim)
# print('shape:',array.shape)
# print('size:',array.size)
# -----------------------------
# a = np.array([[2,23,4],
#               [2,32,4]],dtype=np.int64)
# print(a)
#
# b = np.zeros([3,4],dtype=int)
# print(b)
# c= np.ones((3,4),dtype=int)
# print(c)
# d = np.empty((3,4))
# print(d)
# e = np.arange(12).reshape(3,4)
# print(e)
#
# f = np.linspace(1,10,6).reshape(2,3)
# print(f)

# -------------------------------

# a = np.array([[1,1],
#               [0,1]])
# b = np.arange(4).reshape(2,2)
#
# print(a)
# print(b)
# c = a * b
# c_dot = np.dot(a,b)
# c_dot_2 = a.dot(b)
# print(c)
# print(c_dot)
# print(c_dot_2)
#
#
# d = np.random.random((2,4))
# print(d)
# print(np.sum(d,axis=1))
# print(np.min(d,axis=0))
# print(np.max(d,axis=1))


# -------------------

# A = np.arange(14,2,-1).reshape(3,4)
# print(np.argmin(A))
# print(np.argmax(A))
# print(np.mean(A))
# print(A.mean())
# print(np.average(A))
# print(np.median(A))
# print(np.cumsum(A))
# print(np.diff(A))
# print(np.nonzero(A))
# print(np.sort((A)))
# print(np.transpose(A))
# print(A.T)
# print((A.T).dot(A))
# print(A)
# print(np.clip(A,5,9))
# print(np.mean(A,axis=1))

# ---------------------------------------

# A = np.arange(3,15).reshape(3,4)
# print(A)
# print(A[2][1])
# print(A[2,:])
# print(A[2][:])
# print(A[1,1:2])
#
# for row in A:
#     print(row)
#
# for column in A.T:
#     print(column)
# print(A.flatten())
# for item in A.flat:
#     print(item)


# --------------------------------------

# A = np.array([1,1,1])[:,np.newaxis]
# B = np.array([2,2,2])[:,np.newaxis]
# C = np.vstack((A,B))
# D = np.hstack((A,B))
#
# print(C)
# print(A.shape,C.shape,D.shape)
# print(D)
#
# print(A.T)
# print(A[np.newaxis,:])
# print(A[np.newaxis,:].shape)
#
# print(A[:,np.newaxis])
#
#
# E = np.concatenate((A,B,A,A),axis=1)
# print(E)

# -----------------------------------------


# A = np.arange(12).reshape(3,4)
# print(A)
#
#
# print(np.array_split(A,3,axis=1))
# print(np.vsplit(A,3))
# print(np.hsplit(A,2))

# -----------------------

# a =np.arange(4)
# print(a)
# b = a
# c = a
# d = b
#
#
#
# f = a.copy()
# a[0] = 11
# print(a)
# print(f)

# ------------------------

# s = pd.Series([1,3,6,np.nan,44,1])
# print(s)
#
# dates = pd.date_range('20190101',periods=6)
# print(dates)
#
# df = pd.DataFrame(np.random.randn(6,4),index=dates,columns=['a','b','c','d'])
# print(df)
#
# df1 = pd.DataFrame(np.arange(12).reshape(3,4))
# print(df1)
#
# print(df1)
# print(df1.dtypes)
# print(df.columns)
# print(df.describe())
# print(df.T)
# print(df)
#
# j = df.sort_values(by='a',ascending=False)
# print(j)

# ------------------------------------------------------

# dates = pd.date_range('20190101',periods=6)
# df = pd.DataFrame(np.arange(24).reshape(6,4),index=dates,columns=['A','B','C','D'])
# print(df)
# print(df['A'],df.A)
# print(df[0:3],df['20190102':'20190104'])
#
# print(df.loc['20190102',['A','B']])
#
#
# print(df.iloc[3:5,1:3])
# print(df.ix[:3,['A','C']])
# print(df[df.A>8])


# -------------------------------------------------------------------

# dates = pd.date_range('20190101',periods=6)
# df = pd.DataFrame(np.arange(24).reshape(6,4),index=dates,columns=['A','B','C','D'])
#
# print(df)
#
# df.iloc[1,1] = 1111
# print(df)
#
# df.B[df.A>4] = 0
# print(df)
# df['F'] = np.nan
# print(df)
# df['E'] = pd.Series([1,2,3,4,5,6],index=dates)
# print(df)


# ----------------------------------

# dates = pd.date_range('20130101',periods=6)
# df = pd.DataFrame(np.arange(24).reshape(6,4),index=dates,columns=['A','B','C','D'])
# df.iloc[0,1] = np.nan
# df.iloc[1,2] = np.nan
#
# print(df.dropna(axis=0,how='any'))
# print(df)
#
# print(df.fillna(value=0))
# print(df.isnull())
# print(np.any(df.isnull())==True)

# -------------------------------------------

# --------------------------------------------------


df1 = pd.DataFrame(np.ones((3,4))*0,columns=['a','b','c','d'])
df2 = pd.DataFrame(np.ones((3,4))*1,columns=['a','b','c','d'])
df3 = pd.DataFrame(np.ones((3,4))*2,columns=['a','b','c','d'])

print(df1)
print(df2)
print(df3)

result = pd.concat([df1,df2,df3],axis=0,ignore_index=True)
print(result)

df4 = pd.DataFrame(np.ones((3,4))*1,columns=['b','c','d','e'])

print(df4)

result2 = pd.concat([df1,df4],join='inner',ignore_index=True)
print(result2)

为什么 a = np.empty((3,4))
在b = np.ones((3,4))后面结果全是1啊？？？？？
